import { PrismaService } from '../../common/prisma/prisma.service';
import { UserDto } from './dto/user.dto';
export declare class UserService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(data: Omit<UserDto, 'id'>): Promise<{
        id: string;
        name: string;
        isActive: boolean;
        createdAt: Date;
        country: string;
        city: string | null;
        email: string;
        phone: string | null;
        birthDate: Date | null;
        address: string | null;
        company: string | null;
        position: string | null;
        avatarUrl: string | null;
        passwordHash: string | null;
        googleId: string | null;
        emailVerified: boolean;
        preferredContactMethod: string;
        updatedAt: Date;
        lastLogin: Date | null;
    }>;
    findAll(): Promise<{
        id: string;
        name: string;
        isActive: boolean;
        createdAt: Date;
        country: string;
        city: string | null;
        email: string;
        phone: string | null;
        birthDate: Date | null;
        address: string | null;
        company: string | null;
        position: string | null;
        avatarUrl: string | null;
        passwordHash: string | null;
        googleId: string | null;
        emailVerified: boolean;
        preferredContactMethod: string;
        updatedAt: Date;
        lastLogin: Date | null;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        name: string;
        isActive: boolean;
        createdAt: Date;
        country: string;
        city: string | null;
        email: string;
        phone: string | null;
        birthDate: Date | null;
        address: string | null;
        company: string | null;
        position: string | null;
        avatarUrl: string | null;
        passwordHash: string | null;
        googleId: string | null;
        emailVerified: boolean;
        preferredContactMethod: string;
        updatedAt: Date;
        lastLogin: Date | null;
    }>;
    update(id: string, data: Partial<Omit<UserDto, 'id'>>): Promise<{
        id: string;
        name: string;
        isActive: boolean;
        createdAt: Date;
        country: string;
        city: string | null;
        email: string;
        phone: string | null;
        birthDate: Date | null;
        address: string | null;
        company: string | null;
        position: string | null;
        avatarUrl: string | null;
        passwordHash: string | null;
        googleId: string | null;
        emailVerified: boolean;
        preferredContactMethod: string;
        updatedAt: Date;
        lastLogin: Date | null;
    }>;
    remove(id: string): Promise<{
        id: string;
        name: string;
        isActive: boolean;
        createdAt: Date;
        country: string;
        city: string | null;
        email: string;
        phone: string | null;
        birthDate: Date | null;
        address: string | null;
        company: string | null;
        position: string | null;
        avatarUrl: string | null;
        passwordHash: string | null;
        googleId: string | null;
        emailVerified: boolean;
        preferredContactMethod: string;
        updatedAt: Date;
        lastLogin: Date | null;
    }>;
}
